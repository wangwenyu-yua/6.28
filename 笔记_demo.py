"""
死循环：一般是写代码的人再次的bug
无线循环 ：写代码的人故意让代码无限制的去执行 代码一直不停的运行下去 在书写循环的时候 不确定要多少次
无线循环的使用一般会在循环中添加一个if判断 当if1的条件成立 使用关键子break来终止循环

while True:
    if 判断条件：
    break 关键字的作用是终止循环 当代码执行遇到break 这个循环就不再执行了
    重复执行代码 可以在if下面进行

    书写循环的技巧
    确定这行代码执行几次 如果执行多次 就放在循环缩进中 如果值执行一次 就不要放在循环的缩进中



for循环
语法   for 变量名  in  容器：
    1.for和in都是关键字
    2.容器里面有多少个数据就执行多少次
    3.每次循环会将日期中的数据去除保存到in关键字的前边的变量中


break和continue 是python中的两个关键字 只能在循环中使用


1 break 终止循环  代码执行遇到break 循环不再去执行  循环立即结束
2.continue  跳过本次循环  即代码执行遇到break 本次循环剩下的代码不再去执行 继续下一次循环




1容器：也可以称为数据数列 也是python中的数据类型 或者高级数据类型 容器中可以存放多个数据


1.2字符串
    字符串也是一个容器 字符串也可以包含多个字符 使用引号引起来的内容就是字符串



下标
下标（索引） 就是值字符串中的位置编号 这个编号就是下标
这个编号一般来说都是从左到右进行编号的 从0开始的  python当中支持负数下标 是从右到左进行编号
下标作用：可以使用小标获取字符中某个位置的字符


语法：字符串【下标】获取指定的位置的一个字符



2切片

可以获取字符串中多个字符（多个字符的下标是有规律的 等差数列）
语法：
字符串（start：end：step）

2.1  start是最开始位置的下标 end是结束位置的下标（注意不能取到这个位置的字符） step是步长 等差数列的差值 所取字符下标之间的差值
    默认是1，可以不写
    例子：【1：5：1】  1234
            【1：5：2】1 3


3  find
用法 ：字符串find（sub_str，start，end）
作用：在字符串中查找是否存在sub_str这样的字符串
sub_str:代表想要查找到的小的字符串
start：从哪个下标位置去查找，一般不写 默认是0
end：结束位置，查找到哪个下标结束 一般不写 默认是len（）
返回（）代码执行之后会得到什么 如果有返回就可以使用变量来保存
    1.如果在字符串中找到了sub str 返回sub str第一次出现的正数下标  是sub str中在大字符串中 第一个字符的下标
    2.如果没有找到，返回-1


列表修改操作
列表【下标】=数据
注意：字符串中的字符不能使用下标修改


列表的删除操作
在列表中删除中间的数据 那么后面的数据会前移
    1.根据下标删除
        列表.pop(下标) 删除下标对应的数据
        下标不写，默认删除最后一个数据
        书写存在的下标 删除对应的数据
        返回：：返回的是删除的数据
    2.根据数据值删除
    列表.remove(数据值)
        根据数据值去删除
        返回值为none
        注意：要删除的数据不存在 会报错
    3.清空数据（一般不用）
        列表.clear()
"""
